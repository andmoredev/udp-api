AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Hello World UDP application

Parameters:
  NetworkStackName:
    Type: String
    Description: AWS CloudFormation stack name of the NetworkStack
  ECRRepositoryUrl:
    Type: String
  DockerImageTag:
    Type: String
    Default: latest
    Description: Docker image tag to deploy

Resources:
  HelloWorldUDPLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/hello-world-udp
      RetentionInDays: 7

  HelloWorldCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: hello-world-cluster
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

# ANDRES MORENO
  HelloWorldTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: hello-world-task
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: hello-world-udp-container
          MemoryReservation: 128
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/andmoredev-test-repo:${DockerImageTag}
          Essential: true
          PortMappings:
            - ContainerPort: 53
              Protocol: udp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref HelloWorldUDPLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  HelloWorldService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: hello-world-service
      Cluster: !Ref HelloWorldCluster
      TaskDefinition: !Ref HelloWorldTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: hello-world-udp-container
          ContainerPort: 53
          TargetGroupArn: !ImportValue "udp-service-networking-network-TargetGroupArn"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue "udp-service-networking-network-SecurityGroupId"
          Subnets:
            - !ImportValue "udp-service-networking-network-PublicSubnet1Id"
            - !ImportValue "udp-service-networking-network-PublicSubnet2Id"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

Outputs:
  ServiceUrl:
    Description: URL of the service
    Value:
      !ImportValue "udp-service-networking-network-LoadBalancerDNS"